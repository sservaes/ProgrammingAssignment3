dataSet <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check state and outcome
listOutcome <- c("heart failure", "heart attack", "pneumonia")
if (!outcome %in% listOutcome) {
stop("invalid outcome")
}
## Set the condition outcome
if (outcome == "heart attack") {
mortality <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if (outcome == "heart failure") {
mortality <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if (outcome == "pneumonia") {
mortality <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
## Make the conditions numeric
dataSet[, "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"] <- suppressWarnings(as.numeric(dataSet[, "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"]))
dataSet[, "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"] <- suppressWarnings(as.numeric(dataSet[, "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"]))
dataSet[, "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"] <- suppressWarnings(as.numeric(dataSet[, "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"]))
## Filter out the bad data
bad <- is.na(dataSet[, "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"])
data <- dataSet[!bad,]
bad <- is.na(data[, "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"])
data <- data[!bad,]
bad <- is.na(data[, "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"])
data <- data[!bad,]
## Split in groups and sort
groups <- split(data[, c("Hospital.Name", mortality, "State")], data$State)
sorted <- lapply(groups, function(x) x[order(x[, mortality]), ])
result <- data.frame()
i <- 1
for(element in sorted){
if (num == "best") {
ranking <- 1
} else if (num == "worst"){
ranking <- length(element[, 2])
} else {
ranking <- num
}
if (!is.na(element[ranking,1])) {
result <- rbind(result, element[ranking, c(1, 3)])
}
else {
result <- rbind(result, data.frame("Hospital.Name" = NA, "State" = element[1, 3]))
}
}
return(result)
}
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num="best") {
## Read outcome data
dataSet <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check state and outcome
listOutcome <- c("heart failure", "heart attack", "pneumonia")
if (!outcome %in% listOutcome) {
stop("invalid outcome")
}
## Set the condition outcome
if (outcome == "heart attack") {
mortality <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if (outcome == "heart failure") {
mortality <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if (outcome == "pneumonia") {
mortality <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
## Make the conditions numeric
dataSet[, "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"] <- suppressWarnings(as.numeric(dataSet[, "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"]))
dataSet[, "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"] <- suppressWarnings(as.numeric(dataSet[, "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"]))
dataSet[, "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"] <- suppressWarnings(as.numeric(dataSet[, "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"]))
## Filter out the bad data
bad <- is.na(dataSet[, "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"])
data <- dataSet[!bad,]
bad <- is.na(data[, "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"])
data <- data[!bad,]
bad <- is.na(data[, "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"])
data <- data[!bad,]
## Split in groups and sort
groups <- split(data[, c("Hospital.Name", mortality, "State")], data$State)
sorted <- lapply(groups, function(x) x[order(x[, mortality], x[, 1]), ])
result <- data.frame()
i <- 1
for(element in sorted){
if (num == "best") {
ranking <- 1
} else if (num == "worst"){
ranking <- length(element[, 2])
} else {
ranking <- num
}
if (!is.na(element[ranking,1])) {
result <- rbind(result, element[ranking, c(1, 3)])
}
else {
result <- rbind(result, data.frame("Hospital.Name" = NA, "State" = element[1, 3]))
}
}
return(result)
}
head(rankall("heart attack", 20), 10)
sorted <- lapply(groups, function(x) x[order(x[, mortality], x[, 1]), ])
rm(x)
rm(y)
rm(sorted2)
x <- sorted$AZ
View(x)
rankhospital("AZ","heart attack", 20)
good <- dataSet[, "State"] == state
data <- dataSet[good, ]
state <- "AZ"
good <- dataSet[, "State"] == state
data <- dataSet[good, ]
mortality <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
suppressWarnings(data[, mortality] <- as.numeric(data[, mortality]))
bad <- is.na(data[, mortality])
data <- data[!bad, ]
sorted <- data[order(data[, mortality], data [,2]), ]
sorted[20,]
sorted[20,2]
View(data)
View(sorted)
rankall <- function(outcome, num="best") {
## Read outcome data
dataSet <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check state and outcome
listOutcome <- c("heart failure", "heart attack", "pneumonia")
if (!outcome %in% listOutcome) {
stop("invalid outcome")
}
## Set the condition outcome
if (outcome == "heart attack") {
mortality <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if (outcome == "heart failure") {
mortality <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if (outcome == "pneumonia") {
mortality <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
## Make the conditions numeric
dataSet[, "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"] <- suppressWarnings(as.numeric(dataSet[, "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"]))
dataSet[, "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"] <- suppressWarnings(as.numeric(dataSet[, "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"]))
dataSet[, "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"] <- suppressWarnings(as.numeric(dataSet[, "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"]))
## Filter out the bad data
bad <- is.na(dataSet[, "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"])
data <- dataSet[!bad,]
## Split in groups and sort
groups <- split(data[, c("Hospital.Name", mortality, "State")], data$State)
sorted <- lapply(groups, function(x) x[order(x[, mortality], x[, 1]), ])
result <- data.frame()
i <- 1
for(element in sorted){
if (num == "best") {
ranking <- 1
} else if (num == "worst"){
ranking <- length(element[, 2])
} else {
ranking <- num
}
if (!is.na(element[ranking,1])) {
result <- rbind(result, element[ranking, c(1, 3)])
}
else {
result <- rbind(result, data.frame("Hospital.Name" = NA, "State" = element[1, 3]))
}
}
return(result)
}
suppressWarnings(data[, mortality] <- as.numeric(data[, mortality]))
bad <- is.na(data[, mortality])
data <- data[!bad, ]
sorted <- data[order(data[, mortality], data [,2]), ]
rankhospital("AZ","heart attack", 20)
rankall <- function(outcome, num="best") {
## Read outcome data
dataSet <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check state and outcome
listOutcome <- c("heart failure", "heart attack", "pneumonia")
if (!outcome %in% listOutcome) {
stop("invalid outcome")
}
## Set the condition outcome
if (outcome == "heart attack") {
mortality <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if (outcome == "heart failure") {
mortality <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if (outcome == "pneumonia") {
mortality <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
## Make the conditions numeric
dataSet[, mortality] <- suppressWarnings(as.numeric(dataSet[, "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"]))
## Filter out the bad data
bad <- is.na(dataSet[, mortality])
data <- dataSet[!bad,]
## Split in groups and sort
groups <- split(data[, c("Hospital.Name", mortality, "State")], data$State)
sorted <- lapply(groups, function(x) x[order(x[, mortality], x[, 1]), ])
result <- data.frame()
i <- 1
for(element in sorted){
if (num == "best") {
ranking <- 1
} else if (num == "worst"){
ranking <- length(element[, 2])
} else {
ranking <- num
}
if (!is.na(element[ranking,1])) {
result <- rbind(result, element[ranking, c(1, 3)])
}
else {
result <- rbind(result, data.frame("Hospital.Name" = NA, "State" = element[1, 3]))
}
}
return(result)
}
head(rankall("heart attack", 20), 10)
tail(rankall("heart failure"), 10)
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
rankall <- function(outcome, num="best") {
## Read outcome data
dataSet <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check state and outcome
listOutcome <- c("heart failure", "heart attack", "pneumonia")
if (!outcome %in% listOutcome) {
stop("invalid outcome")
}
## Set the condition outcome
if (outcome == "heart attack") {
mortality <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if (outcome == "heart failure") {
mortality <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if (outcome == "pneumonia") {
mortality <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
## Make the conditions numeric
dataSet[, mortality] <- suppressWarnings(as.numeric(dataSet[, "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"]))
## Filter out the bad data
bad <- is.na(dataSet[, mortality])
data <- dataSet[!bad,]
## Split in groups and sort
groups <- split(data[, c("Hospital.Name", mortality, "State")], data$State)
sorted <- lapply(groups, function(x) x[order(x[, mortality]), ])
result <- data.frame()
i <- 1
for(element in sorted){
if (num == "best") {
ranking <- 1
} else if (num == "worst"){
ranking <- length(element[, 2])
} else {
ranking <- num
}
if (!is.na(element[ranking,1])) {
result <- rbind(result, element[ranking, c(1, 3)])
}
else {
result <- rbind(result, data.frame("Hospital.Name" = NA, "State" = element[1, 3]))
}
}
return(result)
}
tail(rankall("pneumonia", "worst"), 3)
rankall <- function(outcome, num="best") {
## Read outcome data
dataSet <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check state and outcome
listOutcome <- c("heart failure", "heart attack", "pneumonia")
if (!outcome %in% listOutcome) {
stop("invalid outcome")
}
## Set the condition outcome
if (outcome == "heart attack") {
mortality <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if (outcome == "heart failure") {
mortality <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if (outcome == "pneumonia") {
mortality <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
## Make the conditions numeric
dataSet[, mortality] <- suppressWarnings(as.numeric(dataSet[, mortality]))
## Filter out the bad data
bad <- is.na(dataSet[, mortality])
data <- dataSet[!bad,]
## Split in groups and sort
groups <- split(data[, c("Hospital.Name", mortality, "State")], data$State)
sorted <- lapply(groups, function(x) x[order(x[, mortality], x[, 1]), ])
result <- data.frame()
i <- 1
for(element in sorted){
if (num == "best") {
ranking <- 1
} else if (num == "worst"){
ranking <- length(element[, 2])
} else {
ranking <- num
}
if (!is.na(element[ranking,1])) {
result <- rbind(result, element[ranking, c(1, 3)])
}
else {
result <- rbind(result, data.frame("Hospital.Name" = NA, "State" = element[1, 3]))
}
}
return(result)
}
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
tail(rankall("pneumonia", "worst"), 3)
rankall <- function(outcome, num="best") {
## Read outcome data
dataSet <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check state and outcome
listOutcome <- c("heart failure", "heart attack", "pneumonia")
if (!outcome %in% listOutcome) {
stop("invalid outcome")
}
## Set the condition outcome
if (outcome == "heart attack") {
mortality <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if (outcome == "heart failure") {
mortality <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if (outcome == "pneumonia") {
mortality <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
## Make the conditions numeric
dataSet[, mortality] <- suppressWarnings(as.numeric(dataSet[, mortality]))
## Filter out the bad data
bad <- is.na(dataSet[, mortality])
data <- dataSet[!bad,]
## Split in groups and sort
groups <- split(data[, c("Hospital.Name", mortality, "State")], data$State)
sorted <- lapply(groups, function(x) x[order(x[, mortality], x[, 1]), ])
result <- data.frame()
i <- 1
for(element in sorted){
if (num == "best") {
ranking <- 1
} else if (num == "worst"){
ranking <- length(element[, 2])
} else {
ranking <- num
}
if (!is.na(element[ranking,1])) {
result <- rbind(result, element[ranking, c(1, 3)])
}
else {
result <- rbind(result, data.frame("Hospital.Name" = NA, "State" = element[1, 3]))
}
}
colnames(result) <- c("hospital", "state")
return(result)
}
tail(rankall("pneumonia", "worst"), 3)
submit()
tail(rankall("pneumonia", "worst"), 3)
test <- rankall("heart attack", 4)
test
View(test)
rownames(test)
test[3]
test[3,]
test[,3]
test[,2]
x <- test[,2]
x
rownames(test) <- x
test
rankall <- function(outcome, num="best") {
## Read outcome data
dataSet <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check state and outcome
listOutcome <- c("heart failure", "heart attack", "pneumonia")
if (!outcome %in% listOutcome) {
stop("invalid outcome")
}
## Set the condition outcome
if (outcome == "heart attack") {
mortality <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if (outcome == "heart failure") {
mortality <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if (outcome == "pneumonia") {
mortality <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
## Make the conditions numeric
dataSet[, mortality] <- suppressWarnings(as.numeric(dataSet[, mortality]))
## Filter out the bad data
bad <- is.na(dataSet[, mortality])
data <- dataSet[!bad,]
## Split in groups and sort
groups <- split(data[, c("Hospital.Name", mortality, "State")], data$State)
sorted <- lapply(groups, function(x) x[order(x[, mortality], x[, 1]), ])
result <- data.frame()
i <- 1
for(element in sorted){
if (num == "best") {
ranking <- 1
} else if (num == "worst"){
ranking <- length(element[, 2])
} else {
ranking <- num
}
if (!is.na(element[ranking,1])) {
result <- rbind(result, element[ranking, c(1, 3)])
}
else {
result <- rbind(result, data.frame("Hospital.Name" = NA, "State" = element[1, 3]))
}
}
colnames(result) <- c("hospital", "state")
rownames(result) <- result[,2]
return(result)
}
tail(rankall("pneumonia", "worst"), 3)
submit()
test <- rankall("heart attack", 4)
View(test)
rankall <- function(outcome, num="best") {
## Read outcome data
dataSet <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check state and outcome
listOutcome <- c("heart failure", "heart attack", "pneumonia")
if (!outcome %in% listOutcome) {
stop("invalid outcome")
}
## Set the condition outcome
if (outcome == "heart attack") {
mortality <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if (outcome == "heart failure") {
mortality <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if (outcome == "pneumonia") {
mortality <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
## Make the conditions numeric
dataSet[, mortality] <- suppressWarnings(as.numeric(dataSet[, mortality]))
## Filter out the bad data
bad <- is.na(dataSet[, mortality])
data <- dataSet[!bad,]
## Split in groups and sort
groups <- split(data[, c("Hospital.Name", mortality, "State")], data$State)
sorted <- lapply(groups, function(x) x[order(x[, mortality], x[, 1]), ])
result <- data.frame()
i <- 1
for(element in sorted){
if (num == "best") {
ranking <- 1
} else if (num == "worst"){
ranking <- length(element[, 2])
} else {
ranking <- num
}
if (!is.na(element[ranking,1])) {
result <- rbind(result, element[ranking, c(1, 3)])
}
else {
result <- rbind(result, data.frame("Hospital.Name" = NA, "State" = element[1, 3]))
}
}
colnames(result) <- c("hospital", "state")
rownames(result) <- result[,2]
return(result)
}
submit()
submit(manual=TRUE)
rankall <- function(outcome, num="best") {
## Read outcome data
dataSet <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check state and outcome
listOutcome <- c("heart failure", "heart attack", "pneumonia")
if (!outcome %in% listOutcome) {
stop("invalid outcome")
}
## Set the condition outcome
if (outcome == "heart attack") {
mortality <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if (outcome == "heart failure") {
mortality <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if (outcome == "pneumonia") {
mortality <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
## Make the conditions numeric
dataSet[, mortality] <- suppressWarnings(as.numeric(dataSet[, mortality]))
## Filter out the bad data
bad <- is.na(dataSet[, mortality])
data <- dataSet[!bad,]
## Split in groups and sort
groups <- split(data[, c("Hospital.Name", mortality, "State")], data$State)
sorted <- lapply(groups, function(x) x[order(x[, mortality], x[, 1]), ])
result <- data.frame()
i <- 1
for(element in sorted){
if (num == "best") {
ranking <- 1
} else if (num == "worst"){
ranking <- length(element[, 2])
} else {
ranking <- num
}
if (!is.na(element[ranking,1])) {
result <- rbind(result, element[ranking, c(1, 3)])
}
else {
result <- rbind(result, data.frame("Hospital.Name" = NA, "State" = element[1, 3]))
}
}
colnames(result) <- c("hospital", "state")
# rownames(result) <- result[,2]
return(result)
}
submit()
submit()
submit(manual=TRUE)
submit(manual=TRUE)
